import React, { useState, useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../components/context/AuthContext';

export const PersonalCabinet = () => {
  const { isLoggedIn, loginData } = useContext(AuthContext);
  const navigate = useNavigate();
  const { logout } = useContext(AuthContext);
  const [userData, setUserData] = useState({
    IdUser: null,
    Name: "",
    Password: "", // –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    Email: "",
    Bio: "",
    initialName: "",
  });

  const [error, setError] = useState("");
  const [passwordVisible, setPasswordVisible] = useState(false);

  useEffect(() => {
    if (isLoggedIn && loginData?.login) {
      const fetchUserData = async () => {
        try {
          const response = await fetch('/api/GetUserDetailsByNameAndPassword', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              login: loginData.login,
              password: loginData.password,
            }),
          });

          if (response.ok) {
            const data = await response.json();
            setUserData({
              IdUser: data.IdUser,
              Name: data.Name,
              Password: "", // –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª–µ –±—ã–ª–æ –ø—É—Å—Ç—ã–º
              Email: data.Email,
              Bio: data.Bio,
              initialName: data.Name,
            });
          } else {
            setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
          }
        } catch (err) {
          setError("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
          console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
        }
      };

      fetchUserData();
    } else {
      navigate('/');
    }
  }, [isLoggedIn, loginData, navigate]);

  const handleInputChange = ({ target: { name, value } }) => {
    setUserData((prevData) => ({ ...prevData, [name]: value }));
  };

  const togglePasswordVisibility = () => {
    setPasswordVisible(!passwordVisible);
  };

  const handleLogout = () => {
    logout();
    navigate("/");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –Ω–µ –≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
    const bodyToSend = {
      IdUser: userData.IdUser,
      Name: userData.Name,
      Email: userData.Email,
      Bio: userData.Bio,
    };

    if (userData.Password.trim() !== "") {
      // –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      bodyToSend.Password = userData.Password;
    }

    try {
      const response = await fetch('/api/update-user', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(bodyToSend),
      });

      if (response.ok) {
        const data = await response.json();
        alert(data.message);
        handleLogout();
      } else {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
    }
  };

  if (!userData.IdUser) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <div className="personal-cabinet-container">
      <h2 className="personal-cabinet-title">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>
      <form onSubmit={handleSubmit} className="personal-cabinet-form">
        <div className="personal-cabinet-form-group">
          <label className="personal-cabinet-label">
            –ò–º—è
            <input
              type="text"
              name="Name"
              value={userData.Name}
              required
              onChange={handleInputChange}
              className="personal-cabinet-input"
            />
          </label>
        </div>

        <div className="personal-cabinet-form-group">
          <label className="personal-cabinet-label">
            –ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            <div className="personal-cabinet-password-container">
              <input
                type={passwordVisible ? "text" : "password"}
                name="Password"
                value={userData.Password}
                onChange={handleInputChange}
                className="personal-cabinet-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                
              />
              <button
                type="button"
                onClick={togglePasswordVisibility}
                className="personal-cabinet-toggle-button"
                aria-label={passwordVisible ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
              >
                {passwordVisible ? "üôà –°–∫—Ä—ã—Ç—å" : "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å"}
              </button>
            </div>
            <small className="personal-cabinet-hint">
              –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å
            </small>
          </label>
        </div>

        <div className="personal-cabinet-form-group">
          <label className="personal-cabinet-label">
            Email
            <input
              type="email"
              name="Email"
              value={userData.Email}
              onChange={handleInputChange}
              required
              className="personal-cabinet-input"
            />
          </label>
        </div>

        <div className="personal-cabinet-form-group">
          <label className="personal-cabinet-label">
            –ë–∏–æ–≥—Ä–∞—Ñ–∏—è
            <textarea
              name="Bio"
              value={userData.Bio}
              onChange={handleInputChange}
              className="personal-cabinet-textarea"
            />
          </label>
        </div>

        <div className="personal-cabinet-button-group">
          <button
            type="submit"
            className="personal-cabinet-primary-button"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </button>
          <button
            type="button"
            className="personal-cabinet-primary-button"
            onClick={() => navigate('/')}
          >
            –ù–∞–∑–∞–¥
          </button>
        </div>
      </form>

      {error && <p className="personal-cabinet-error-message">{error}</p>}
    </div>
  );
};

export default PersonalCabinet;
