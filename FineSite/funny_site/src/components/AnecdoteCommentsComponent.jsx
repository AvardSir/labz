import React, { useEffect, useState, useContext } from "react";
import { useParams } from "react-router-dom";
import { AuthContext } from "./context/AuthContext"; // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
import { useNavigate } from 'react-router-dom';

export const AnecdoteCommentsComponent = () => {
  const { anecdoteId } = useParams(); // –ü–æ–ª—É—á–∞–µ–º ID –∞–Ω–µ–∫–¥–æ—Ç–∞ –∏–∑ URL
  const { loginData } = useContext(AuthContext); // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [anecdote, setAnecdote] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞
  const [comments, setComments] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const [newComment, setNewComment] = useState(""); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const [userId, setUserId] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const navigate = useNavigate();
  useEffect(() => {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞
    fetch(`/api/anecdotes`)
      .then((res) => res.json())
      .then((data) => {
        // –ò—â–µ–º –∞–Ω–µ–∫–¥–æ—Ç —Å –Ω—É–∂–Ω—ã–º ID
        const foundAnecdote = data.find((a) => a.IdAnecdote === parseInt(anecdoteId));
        setAnecdote(foundAnecdote); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç
      })
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞:", err));

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞
    fetch(`/api/comments-anecdote?anecdoteId=${anecdoteId}`)
      .then((res) => res.json())
      .then((data) => setComments(data))
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", err));

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (loginData && loginData.login) {

      fetch(`/api/IdByUsername?Name=${encodeURIComponent(loginData.login)}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    })
    .then((res) => {
        if (!res.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
        }
        return res.json();
    })
    .then((data) => {
        if (data && data.IdUser) {
          
            setUserId(data.IdUser); // –°–æ—Ö—Ä–∞–Ω—è–µ–º IdUser
        } else {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IdUser.");
        }
    })
    .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IdUser:", err));
    
    }
    
  }, [anecdoteId, loginData]);

  const handleAddComment = () => {
    if (!newComment) {
      return alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if (!loginData || !loginData.login || !userId) {
      return alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.");
    }
    
    fetch(`/api/add-comment-anecdote`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        Text: newComment,
        IdUser: userId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        IdAnecdote: anecdoteId,
        
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.message === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω") {
          // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
          setComments([
            ...comments,
            {
              Text: newComment,
              Date: new Date().toISOString(),
              AuthorName: loginData.login, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            },
          ]);
          setNewComment(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        } else {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", data.error);
        }
      })
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err));
  };

  return (
    <div className="anecdote-comments-page">
      {anecdote ? (
        
        <div className="card">
          <div className="card-content">
                      
                <p >
                  {anecdote.Text.split('\n').map((line, index) => (
                    <React.Fragment key={index}>
                      {line}
                      {index < anecdote.Text.split('\n').length - 1 && <br />}
                    </React.Fragment>
                  ))}
                </p>
          
                      </div>
                      
                      <div className="card-meta">
                        <span>üè∑Ô∏è {anecdote.AnecdoteType.trim()}</span>
                        <span>üìÖ {new Date(anecdote.Date).toLocaleDateString()}</span>
                        {/* <span>‚≠ê {anecdote.Rate}</span> */}
                        <span>üë§ {anecdote.UserName}</span>
                      </div>
        </div>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞...</p>
      )}
      

      <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</h4>
      <ul className="comments-list">
  {comments.length > 0 ? (
    comments.map((comment, index) => (
      <li key={index} className="comment-item">
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
        <div className="comment-bubble">
          <p className="comment-text">{comment.Text}</p>
        </div>
        
        {/* –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
        <div className="comment-meta">
          {/* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ */}
          <div className="comment-author">
            
            <strong className="author-name">{comment.AuthorName}</strong>
          </div>
          
          {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
          <time 
            dateTime={new Date(comment.Date).toISOString()}
            className="comment-date"
          >
            {new Date(comment.Date).toLocaleDateString('ru-RU', {
              day: 'numeric',
              month: 'long',
              year: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}
          </time>
        </div>
      </li>
    ))
  ) : (
    <div className="no-comments">
      <i className="icon-comment"></i>
      <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</p>
    </div>
  )}
</ul>
      <div>
        <input
          type="text"
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        />
        <button onClick={handleAddComment}>–î–æ–±–∞–≤–∏—Ç—å</button>
        
        <button onClick={() => navigate('/')}>–ù–∞–∑–∞–¥</button>
      </div>
    </div>
  );
};
