import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
// import { AuthContext } from '../context/AuthContext'; // –ø—É—Ç—å –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–π
import { AuthContext } from './context/AuthContext';
import { Header } from './Header';
const Anecdoteator = () => {
  const [chainList, setChainList] = useState([]);
  const [selectedChainId, setSelectedChainId] = useState(null);
  const [parts, setParts] = useState([]);
  const [continueText, setContinueText] = useState('');
  const [startText, setStartText] = useState('');
  const [isClosed, setIsClosed] = useState(false);

  const { loginData } = useContext(AuthContext); // ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞

  const fetchChainList = async () => {
    try {
      const res = await axios.get('/api/chain/list');
      setChainList(res.data);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ø–æ—á–µ–∫', e);
    }
  };

  const fetchChainStatus = async (id) => {
    try {
      const res = await axios.get(`/api/chain/${id}/status`);
      setIsClosed(res.data.isClosed);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ø–æ—á–∫–∏', e);
    }
  };

  useEffect(() => {
    fetchChainList();
  }, []);

  useEffect(() => {
    if (!selectedChainId) return;
    const fetchParts = async () => {
      try {
        const res = await axios.get(`/api/chain/${selectedChainId}/parts`);
        setParts(res.data);
        fetchChainStatus(selectedChainId); // –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–µ–π —Ü–µ–ø–æ—á–∫–∏', e);
      }
    };
    fetchParts();
  }, [selectedChainId]);

  const addContinue = async () => {
    if (!selectedChainId || isClosed) return;
    const lastPartId = parts.length ? parts[parts.length - 1].IdPart : null;
    try {
      await axios.post('/api/chain/continue', {
        ChainId: selectedChainId,
        ParentId: lastPartId,
        Text: continueText,
      });
      setContinueText('');
      const res = await axios.get(`/api/chain/${selectedChainId}/parts`);
      setParts(res.data);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', e);
    }
  };
  const deleteChain = async () => {
    if (!selectedChainId) return;
    if (!window.confirm('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ø–æ—á–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;

    try {
      await axios.delete(`/api/chain/${selectedChainId}`);
      setSelectedChainId(null);
      await fetchChainList();
      setParts([]);
      setIsClosed(false);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏', e);
    }
  };

  const createNewChain = async () => {
    if (!startText.trim()) return;
    try {
      const res = await axios.post('/api/chain/start', {
        Text: startText.trim(),
        AuthorId: loginData?.IdUser, // ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      });
      const newId = res.data.ChainId;
      setStartText('');
      await fetchChainList();
      setSelectedChainId(newId);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏', e);
    }
  };


  const closeChain = async () => {
    try {
      await axios.post(`/api/chain/${selectedChainId}/close`);
      await fetchChainStatus(selectedChainId); // –æ–±–Ω–æ–≤–∏–º —Ñ–ª–∞–≥
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ü–µ–ø–æ—á–∫–∏', e);
    }
  };
const openChain = async () => {
  try {
    await axios.post(`/api/chain/${selectedChainId}/open`);
    await fetchChainStatus(selectedChainId); // –æ–±–Ω–æ–≤–∏–º —Ñ–ª–∞–≥
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ü–µ–ø–æ—á–∫–∏', e);
  }
};

  return (
    <div>
      <Header />
      <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ø–æ—á–∫—É</h2>
      <select
        value={selectedChainId || ''}
        onChange={e => setSelectedChainId(Number(e.target.value) || null)}
      >
        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ø–æ—á–∫—É --</option>
        {chainList.map(chain => (
          <option key={chain.ChainId} value={chain.ChainId}>
            #{chain.ChainId}: {chain.StartText}
          </option>
        ))}
      </select>

      <h3>–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ø–æ—á–∫—É</h3>
      <textarea
        value={startText}
        onChange={e => setStartText(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –∞–Ω–µ–∫–¥–æ—Ç–∞"
        style={{ width: '100%' }}
      />
      <button onClick={createNewChain}>–°–æ–∑–¥–∞—Ç—å</button>

      {selectedChainId && (
        <>
          <h3>–ß–∞—Å—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞</h3>
          <div style={{ background: '#eee', padding: 10 }}>
            {parts.map(p => (
              <p key={p.IdPart}>{p.Text}</p>
            ))}
          </div>

          {isClosed ? (
  <div>
    {loginData?.IdRights == 2 && (
      <div style={{ marginTop: 20 }}>
        <button
          onClick={deleteChain}
          style={{ background: 'darkred', color: 'white', marginLeft: 10 }}
        >
          üóë –£–¥–∞–ª–∏—Ç—å —Ü–µ–ø–æ—á–∫—É
        </button>
        <button
          onClick={openChain}
          style={{ background: 'green', color: 'white', marginLeft: 10 }}
        >
          üîì –û—Ç–∫—Ä—ã—Ç—å —Ü–µ–ø–æ—á–∫—É
        </button>
      </div>
    )}

              <p style={{ color: 'red' }}>‚ùå –¶–µ–ø–æ—á–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</p>
            </div>
            
          ) : (
            <>
              <textarea
                placeholder="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç..."
                value={continueText}
                onChange={e => setContinueText(e.target.value)}
                style={{ width: '100%', marginTop: 10 }}
              />
              <button onClick={addContinue}>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ</button>
            </>
          )}

          {loginData?.IdRights == 2 && !isClosed && (
            <div style={{ marginTop: 20 }}>
              <button
                onClick={deleteChain}
                style={{ background: 'darkred', color: 'white', marginLeft: 10 }}
              >
                üóë –£–¥–∞–ª–∏—Ç—å —Ü–µ–ø–æ—á–∫—É
              </button>
              <button onClick={closeChain} style={{ background: 'darkred', color: 'white' }}>
                ‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞–Ω–µ–∫–¥–æ—Ç
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default Anecdoteator;
