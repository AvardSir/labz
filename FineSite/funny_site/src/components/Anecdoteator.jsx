import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Anecdoteator = () => {
  const [chainList, setChainList] = useState([]);
  const [selectedChainId, setSelectedChainId] = useState(null);
  const [parts, setParts] = useState([]);
  const [continueText, setContinueText] = useState('');

  useEffect(() => {
  const fetchChainList = async () => {
    try {
      const res = await axios.get('/api/chain/list');
      console.log('res::: ', res);
      console.log('üß™ chainList –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res.data);
      setChainList(res.data);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ø–æ—á–µ–∫', e);
    }
  };
  fetchChainList();

}, []);


  // –ü–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
  useEffect(() => {
    if (!selectedChainId) return;
    const fetchParts = async () => {
      try {
        const res = await axios.get(`/api/chain/${selectedChainId}/parts`);
        setParts(res.data);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–µ–π —Ü–µ–ø–æ—á–∫–∏', e);
      }
    };
    fetchParts();
  }, [selectedChainId]);

  // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
  const addContinue = async () => {
  if (!selectedChainId) return alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ø–æ—á–∫—É!');
  try {
    const lastPartId = parts.length ? parts[parts.length - 1].IdPart : null;
    await axios.post('/api/chain/continue', {
  ChainId: selectedChainId,
  ParentId: lastPartId,
  Text: continueText,  // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π T, –∫–∞–∫ –≤ APIconsole.log('::: ', );
});

    setContinueText('');
    const res = await axios.get(`/api/chain/${selectedChainId}/parts`);
    setParts(res.data);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', e);
  }
};

  return (
    <div>
      <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ø–æ—á–∫—É</h2>
      <select
        value={selectedChainId || ''}
        onChange={e => setSelectedChainId(Number(e.target.value) || null)}
      >
        <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ø–æ—á–∫—É --</option>
        {chainList.map(chain => (
          <option key={chain.ChainId} value={chain.ChainId}>
            #{chain.ChainId}: {chain.StartText}
          </option>
        ))}
      </select>

      {selectedChainId && (
        <>
          <h3>–ß–∞—Å—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞</h3>
          <div>
            {parts.map(p => (
              <p key={p.IdPart}>{p.Text}</p>
            ))}
          </div>

          <textarea
            placeholder="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç..."
            value={continueText}
            onChange={e => setContinueText(e.target.value)}
          />
          <button onClick={addContinue}>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ</button>
        </>
      )}
    </div>
  );
};

export default Anecdoteator;
