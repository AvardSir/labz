import React, { useEffect, useState} from "react";
import { useParams } from "react-router-dom";
import { AuthContext } from "./context/AuthContext"; // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
import { useNavigate } from 'react-router-dom';
// import { AuthContext } from "./context/AuthContext";
import { useContext } from "react";

export const EventCommentsComponent = () => {
  const navigate = useNavigate();
  const { eventId } = useParams();
  const { loginData } = useContext(AuthContext);
  const [event, setEvent] = useState(null);
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState("");
  const [userId, setUserId] = useState(null);

  useEffect(() => {
    fetch(`/event-details/${eventId}`)
      .then((res) => {
        if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        return res.json();
      })
      .then((data) => setEvent(data[0]))
      .catch((err) => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è:', err));

    fetch(`/api/get-comments-for-event?eventId=${eventId}`)
      .then((res) => res.json())
      .then((data) => setComments(data))
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", err));

    if (loginData && loginData.login) {
      fetch(`/api/IdByUsername_forEvents?Name=${encodeURIComponent(loginData.login)}`)
        .then((res) => res.json())
        .then((data) => {
          if (data && data.IdUser) setUserId(data.IdUser);
          else console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IdUser.");
        })
        .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IdUser:", err));
    }
  }, [eventId, loginData]);

  const handleAddComment = () => {
    if (!newComment) return alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    if (!loginData || !loginData.login || !userId)
      return alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.");

    fetch(`/api/add-comment`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        text: newComment,
        idUser: userId,
        idEvent: eventId,
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.message === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.") {
          setComments([
            ...comments,
            {
              IdCommentsEvents: data.insertedId || Date.now(), // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id
              CommentText: newComment,
              CommentDate: new Date().toISOString(),
              AuthorName: loginData.login,
              IdUser: userId,
            },
          ]);
          setNewComment("");
        } else {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", data.error);
        }
      })
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err));
  };

  const handleDeleteComment = async (id) => {
    if (!window.confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")) return;

    try {
      const res = await fetch(`/api/event-comment-delete/${id}`, { method: "DELETE" });
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
      
      setComments(comments.filter(c => c.IdCommentsEvents !== id));
    } catch (err) {
      console.error(err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");
    }
  };

  return (
    <div className="event-comments-page">
      {event ? (
        <div className="card">
          <h4 className="card-title">{event.Name}</h4>
          <div className="card-content">
            <p>{event.Description}</p>
          </div>
          <div className="card-meta">
            <span>üí∞ {event.–°—Ç–æ–∏–º–æ—Å—Ç—å} ‚ÇΩ</span>
            <span>üìÖ {new Date(event.Date).toLocaleDateString()}</span>
            <span>ü™ë {event.HowManyFreeSeats} –º–µ—Å—Ç</span>
            <span>üè∑Ô∏è {event.–¢–∏–ø–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è}</span>
            <span>{event.–ü—Ä–æ–≤–µ–¥–µ–Ω–æ ? '‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ' : 'üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}</span>
          </div>
        </div>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...</p>
      )}
      <button onClick={() => navigate('/events')} className="back-button">–ù–∞–∑–∞–¥</button>
      
      <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</h4>
      <ul className="comments-list">
        {comments.length > 0 ? (
          comments.map((comment) => (
            <li key={comment.IdCommentsEvents} className="comment-item">
              <div className="comment-bubble">
                <p className="comment-text">{comment.CommentText}</p>
              </div>
              <div className="comment-meta">
                <div className="comment-author">
                  <strong className="author-name">{comment.AuthorName}</strong>
                </div>
                <time className="comment-date">
                  {comment.CommentDate
                    ? new Date(comment.CommentDate).toLocaleString('ru-RU', {
                        day: 'numeric',
                        month: 'long',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                      })
                    : ''}
                </time>
                {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
                {loginData.IdRights == 2 && (
                  <button
                    className="delete-comment-button"
                    onClick={() => handleDeleteComment(comment.IdCommentsEvents)}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                )}
              </div>
            </li>
          ))
        ) : (
          <div className="no-comments">
            <i className="icon-comment"></i>
            <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</p>
          </div>
        )}
      </ul>

      <div className="comment-container">
        <input
          type="text"
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          className="comment-input"
        />
        <button onClick={handleAddComment} className="comment-button">–î–æ–±–∞–≤–∏—Ç—å</button>
        <button onClick={() => navigate('/events')} className="back-button">–ù–∞–∑–∞–¥</button>
      </div>
    </div>
  );
};
