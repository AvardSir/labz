import React, { useEffect, useState, useContext } from "react";
import { useParams } from "react-router-dom";
import { AuthContext } from "./context/AuthContext"; // –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
import { useNavigate } from 'react-router-dom';

export const EventCommentsComponent = () => {
  const navigate = useNavigate();
  const { eventId } = useParams(); // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ URL
  const { loginData } = useContext(AuthContext); // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [event, setEvent] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
  const [comments, setComments] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const [newComment, setNewComment] = useState(""); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const [userId, setUserId] = useState(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  useEffect(() => {
    
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    fetch(`/event-details/${eventId}`)  // URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ eventId
  .then((res) => {
    if (!res.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
    return res.json();
  })
  .then((data) => setEvent(data[0]))
  .catch((err) => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è:', err));

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    fetch(`/api/get-comments-for-event?eventId=${eventId}`)
      .then((res) => res.json())
      .then((data) => setComments(data))
      .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", err));

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.log(loginData.login)
    
    if (loginData && loginData.login) {
      fetch(`/api/IdByUsername_forEvents?Name=${encodeURIComponent(loginData.login)}`)
        .then((res) => res.json())
        .then((data) => {
          if (data && data.IdUser) {
            setUserId(data.IdUser); // –°–æ—Ö—Ä–∞–Ω—è–µ–º IdUser
          } else {
            console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IdUser.");
          }
        })
        .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IdUser:", err));
    }
  }, [eventId, loginData]);

  const handleAddComment = () => {
    if (!newComment) {
      return alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    
    if (!loginData || !loginData.login || !userId) {
      return alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.");
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    fetch(`/api/add-comment`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        text: newComment, // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—É `@Text`
        idUser: userId,   // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—É `@IdUser`
        idEvent: eventId, // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—É `@IdEvent`
      }),
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.message === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.") {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–ø–∏—Å–æ–∫
          setComments([
            ...comments,
            {
              CommentText: newComment, // –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞ UI
              CommentDate: new Date().toISOString(), // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
              AuthorName: loginData.login,    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            },
          ]);
          setNewComment(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        } else {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", data.error);
        }
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", err);
      });
    
  };

  return (
    <div className="event-comments-page">
      {event ? (
        <div className="card">
          <h4 className="card-title">{event.Name}</h4>
          <div className="card-content">
            <p>{event.Description}</p>
          </div>
        
          <div className="card-meta">
            <span>üí∞ {event.–°—Ç–æ–∏–º–æ—Å—Ç—å} ‚ÇΩ</span>
            <span>üìÖ {new Date(event.Date).toLocaleDateString()}</span>
            <span>ü™ë {event.HowManyFreeSeats} –º–µ—Å—Ç</span>
            <span>üè∑Ô∏è {event.–¢–∏–ø–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è}</span>
            
            <span>{event.–ü—Ä–æ–≤–µ–¥–µ–Ω–æ === true ? '‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ' : 'üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}</span>
          </div>
        
        </div>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...</p>
      )}
<button onClick={() => navigate('/events')} class="back-button">–ù–∞–∑–∞–¥</button>
      <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</h4>
      <ul className="comments-list">
  {comments.length > 0 ? (
    comments.map((comment, index) => (
      <li key={index} className="comment-item">
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
        <div className="comment-bubble">
          {console.log(comment)}
          <p className="comment-text">{comment.CommentText}</p>
        </div>
        
        {/* –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ */}
        <div className="comment-meta">
          {/* –ê–≤–∞—Ç–∞—Ä –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞ */}
          <div className="comment-author">
            
            <strong className="author-name">{comment.AuthorName}</strong>
          </div>
          
          {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
          
        </div>
      </li>
    ))
  ) : (
    <div className="no-comments">
      <i className="icon-comment"></i>
      <p>–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</p>
    </div>
  )}
</ul>
      <div class="comment-container">
    <input
        type="text"
        value={newComment}
        onChange={(e) => setNewComment(e.target.value)}
        placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        class="comment-input"
    />
    <button onClick={handleAddComment} class="comment-button">–î–æ–±–∞–≤–∏—Ç—å</button>
    <button onClick={() => navigate('/events')} class="back-button">–ù–∞–∑–∞–¥</button>
</div>
    </div>
  );
};
