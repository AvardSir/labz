const sql = require("mssql")
const bcrypt = require("bcrypt")
const crypto = require("crypto")
const nodemailer = require("nodemailer")

const saltRounds = 10

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  host: "smtp.mail.ru",
  port: 465,
  secure: true,
  auth: {
    user: "funnysite@bk.ru", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
    pass: "QVywDI3M6hnHnb8eUdNt", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
  },
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
const sendForgotPasswordEmail = async (pool, email) => {
  console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
  const userResult = await pool
    .request()
    .input("email", sql.NVarChar, email)
    .query("SELECT [IdUser], [Name] FROM [dbo].[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] WHERE [Email] = @email")

  if (userResult.recordset.length === 0) {
    throw new Error("USER_NOT_FOUND")
  }

  const user = userResult.recordset[0]
  console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${user.IdUser}, Name=${user.Name}`)

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  const resetToken = crypto.randomBytes(32).toString("hex")
  console.log(`üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω: ${resetToken}`)

  try {
    // –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SQL –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    const insertResult = await pool
      .request()
      .input("userId", sql.Int, user.IdUser)
      .input("token", sql.NVarChar, resetToken)
      .query(`
        INSERT INTO [dbo].[PasswordResetTokens] ([UserId], [Token], [ExpiryDate], [CreatedAt])
        VALUES (@userId, @token, DATEADD(HOUR, 1, GETDATE()), GETDATE())
      `)

    console.log(`üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: ${insertResult.rowsAffected[0]}`)

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const verifyResult = await pool
      .request()
      .input("checkToken", sql.NVarChar, resetToken)
      .query(`
        SELECT 
          [ExpiryDate], 
          [CreatedAt],
          DATEDIFF(MINUTE, [CreatedAt], [ExpiryDate]) as DurationMinutes,
          DATEDIFF(MINUTE, GETDATE(), [ExpiryDate]) as MinutesLeft
        FROM [dbo].[PasswordResetTokens] 
        WHERE [Token] = @checkToken
      `)

    if (verifyResult.recordset.length > 0) {
      const tokenInfo = verifyResult.recordset[0]
      console.log(`‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`)
      console.log(`   –°–æ–∑–¥–∞–Ω: ${tokenInfo.CreatedAt}`)
      console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${tokenInfo.ExpiryDate}`)
      console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tokenInfo.DurationMinutes} –º–∏–Ω—É—Ç`)
      console.log(`   –û—Å—Ç–∞–ª–æ—Å—å: ${tokenInfo.MinutesLeft} –º–∏–Ω—É—Ç`)
    }
  } catch (dbError) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î:", dbError)
    throw dbError
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  const resetUrl = `http://localhost:3000/reset-password?token=${resetToken}`

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
  const mailOptions = {
    from: 'funnysite@bk.ru',
    to: email,
    subject: "üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - FunnySite",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #333;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${user.Name}</strong>!</p>
        <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ FunnySite.</p>
        <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</p>
        <div style="text-align: center; margin: 30px 0;">
          <a href="${resetUrl}" 
             style="background-color: #007bff; color: white; padding: 15px 30px; 
                    text-decoration: none; border-radius: 8px; display: inline-block;
                    font-weight: bold; font-size: 16px;">
            üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
          </a>
        </div>
        <p style="color: #666; font-size: 14px;">
          –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.
        </p>
        <p style="color: #666; font-size: 14px;">
          –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        </p>
      </div>
    `,
  }

  await transporter.sendMail(mailOptions)
  console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`)

  return { success: true, message: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email" }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
const cleanupExpiredTokens = async (pool) => {
  try {
    const cleanupResult = await pool.request().query(`
      DELETE FROM [dbo].[PasswordResetTokens] 
      WHERE [ExpiryDate] < GETDATE() OR [Used] = 1
    `)

    const deletedCount = cleanupResult.rowsAffected[0]
    if (deletedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${deletedCount} –∏—Å—Ç–µ–∫—à–∏—Ö/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`)
    }

    return deletedCount
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:", error)
    return 0
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
const validateResetToken = async (pool, token) => {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: ${token}`)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  await cleanupExpiredTokens(pool)

  const tokenResult = await pool
    .request()
    .input("token", sql.NVarChar, token)
    .query(`
      SELECT 
        [UserId], 
        [ExpiryDate], 
        [Used], 
        [CreatedAt],
        DATEDIFF(MINUTE, GETDATE(), [ExpiryDate]) as MinutesLeft
      FROM [dbo].[PasswordResetTokens] 
      WHERE [Token] = @token AND [ExpiryDate] > GETDATE() AND [Used] = 0
    `)

  console.log(`üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ ${tokenResult.recordset.length} –∑–∞–ø–∏—Å–µ–π`)

  if (tokenResult.recordset.length === 0) {
    console.log(`‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å—Ç–µ–∫ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω`)
    return { valid: false, message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω" }
  }

  const tokenData = tokenResult.recordset[0]
  console.log(`‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å ${tokenData.MinutesLeft} –º–∏–Ω—É—Ç`)

  return { valid: true }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
const resetPassword = async (pool, token, password) => {
  console.log(`üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${token}`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º UserId –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
  const tokenResult = await pool
    .request()
    .input("token", sql.NVarChar, token)
    .query(`
      SELECT [UserId] FROM [dbo].[PasswordResetTokens] 
      WHERE [Token] = @token AND [ExpiryDate] > GETDATE() AND [Used] = 0
    `)

  if (tokenResult.recordset.length === 0) {
    console.log(`‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫`)
    throw new Error("INVALID_TOKEN")
  }

  const userId = tokenResult.recordset[0].UserId
  console.log(`üë§ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`)

  // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
  const hashedPassword = await bcrypt.hash(password, saltRounds)

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateResult = await pool
    .request()
    .input("userId", sql.Int, userId)
    .input("password", sql.NVarChar, hashedPassword)
    .query("UPDATE [dbo].[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] SET [Password] = @password WHERE [IdUser] = @userId")

  console.log(`üíæ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: ${updateResult.rowsAffected[0]}`)

  // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
  const markUsedResult = await pool
    .request()
    .input("token", sql.NVarChar, token)
    .query("UPDATE [dbo].[PasswordResetTokens] SET [Used] = 1 WHERE [Token] = @token")

  console.log(`üîí –¢–æ–∫–µ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: ${markUsedResult.rowsAffected[0]}`)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
  await cleanupExpiredTokens(pool)

  return { success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" }
}

module.exports = {
  sendForgotPasswordEmail,
  resetPassword,
  validateResetToken,
  cleanupExpiredTokens, // —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}
